<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Copyright 2012 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.opensource.org/licenses/ecl2.php

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<databaseChangeLog xmlns='http://www.liquibase.org/xml/ns/dbchangelog'
	xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
	xsi:schemaLocation='http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd'>

	<changeSet author="RICE20" id="RICE_SERVER_UPDATES_oracle-mod8" dbms="oracle">

	<sql splitStatements="false"><![CDATA[
	    DECLARE
            	PROCEDURE drop_synonyms IS
		    CURSOR synonyms_cursor IS
                        SELECT synonym_name
			FROM all_synonyms
			WHERE owner = 'PUBLIC' AND (substr(synonym_name, 1, 4) = 'KREW' or substr(synonym_name, 1, 4) = 'KRNS' or substr(synonym_name, 1, 4) = 'KRMS');
            BEGIN
                FOR syn IN synonyms_cursor LOOP
                    EXECUTE IMMEDIATE 'DROP PUBLIC SYNONYM ' || syn.synonym_name;
                END LOOP;
            END;
            BEGIN
                drop_synonyms();
	    END;
	]]></sql>		
                
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_NODE_T RENAME TO TEMP_KREW_RTE_NODE_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_RTE_NODE_T
		(
		      RTE_NODE_ID VARCHAR2(40)
		        , DOC_TYP_ID VARCHAR2(40)
		        , NM VARCHAR2(255) NOT NULL
		        , TYP VARCHAR2(255) NOT NULL
		        , RTE_MTHD_NM VARCHAR2(255)
		        , RTE_MTHD_CD VARCHAR2(2)
		        , FNL_APRVR_IND NUMBER(1)
		        , MNDTRY_RTE_IND NUMBER(1)
		        , ACTVN_TYP VARCHAR2(250)
		        , BRCH_PROTO_ID VARCHAR2(40)
		        , VER_NBR NUMBER(8) default 0
		        , CONTENT_FRAGMENT VARCHAR2(4000)
		        , GRP_ID VARCHAR2(40)
		        , NEXT_DOC_STAT VARCHAR2(64)
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_NODE_T
		    ADD CONSTRAINT KREW_RTE_NODE_TP1
		PRIMARY KEY (RTE_NODE_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_NODE_TI1 
		  ON KREW_RTE_NODE_T 
		  (NM, DOC_TYP_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_NODE_TI2 
		  ON KREW_RTE_NODE_T 
		  (DOC_TYP_ID, FNL_APRVR_IND)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_NODE_TI3 
		  ON KREW_RTE_NODE_T 
		  (BRCH_PROTO_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_NODE_TI4 
		  ON KREW_RTE_NODE_T 
		  (DOC_TYP_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_RTE_NODE_T
		(RTE_NODE_ID, DOC_TYP_ID, NM, TYP, RTE_MTHD_NM, RTE_MTHD_CD, FNL_APRVR_IND,
		MNDTRY_RTE_IND, ACTVN_TYP, BRCH_PROTO_ID, VER_NBR, CONTENT_FRAGMENT, GRP_ID, NEXT_DOC_STAT)
		SELECT CAST(RTE_NODE_ID as VARCHAR2(40)), DOC_TYP_ID, NM, TYP, RTE_MTHD_NM, RTE_MTHD_CD, FNL_APRVR_IND,
		MNDTRY_RTE_IND, ACTVN_TYP, CAST(BRCH_PROTO_ID as VARCHAR2(40)), VER_NBR, CONTENT_FRAGMENT, GRP_ID, NEXT_DOC_STAT
		FROM TEMP_KREW_RTE_NODE_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_NODE_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_NODE_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_RTE_NODE_INSTN_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_NODE_INSTN_T RENAME TO TEMP_KREW_RTE_NODE_INSTN_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_RTE_NODE_INSTN_T
		(
		      RTE_NODE_INSTN_ID VARCHAR2(40)
		        , DOC_HDR_ID VARCHAR2(40) NOT NULL
		        , RTE_NODE_ID VARCHAR2(40) NOT NULL
		        , BRCH_ID VARCHAR2(40)
		        , PROC_RTE_NODE_INSTN_ID VARCHAR2(40)
		        , ACTV_IND NUMBER(1) default 0 NOT NULL
		        , CMPLT_IND NUMBER(1) default 0 NOT NULL
		        , INIT_IND NUMBER(1) default 0 NOT NULL
		        , VER_NBR NUMBER(8) default 0
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_NODE_INSTN_T
		    ADD CONSTRAINT KREW_RTE_NODE_INSTN_TP1
		PRIMARY KEY (RTE_NODE_INSTN_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_NODE_INSTN_TI1 
		  ON KREW_RTE_NODE_INSTN_T 
		  (DOC_HDR_ID, ACTV_IND, CMPLT_IND)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_NODE_INSTN_TI2 
		  ON KREW_RTE_NODE_INSTN_T 
		  (RTE_NODE_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_NODE_INSTN_TI3 
		  ON KREW_RTE_NODE_INSTN_T 
		  (BRCH_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_NODE_INSTN_TI4 
		  ON KREW_RTE_NODE_INSTN_T 
		  (PROC_RTE_NODE_INSTN_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_RTE_NODE_INSTN_T
		(RTE_NODE_INSTN_ID, DOC_HDR_ID, RTE_NODE_ID, BRCH_ID, PROC_RTE_NODE_INSTN_ID, 
		ACTV_IND, CMPLT_IND, INIT_IND, VER_NBR)
		SELECT CAST(RTE_NODE_INSTN_ID as VARCHAR2(40)), DOC_HDR_ID, 
		CAST(RTE_NODE_ID as VARCHAR2(40)), CAST(BRCH_ID as VARCHAR2(40)), 
		CAST(PROC_RTE_NODE_INSTN_ID as VARCHAR2(40)), 
		ACTV_IND, CMPLT_IND, INIT_IND, VER_NBR
		FROM TEMP_KREW_RTE_NODE_INSTN_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_NODE_INSTN_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_NODE_INSTN_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_RTE_NODE_INSTN_LNK_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_NODE_INSTN_LNK_T RENAME TO TEMP_KREW_RTE_NODE_INSTN_LNK_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_RTE_NODE_INSTN_LNK_T
		(
		      FROM_RTE_NODE_INSTN_ID VARCHAR2(40)
		        , TO_RTE_NODE_INSTN_ID VARCHAR2(40)
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_NODE_INSTN_LNK_T
		    ADD CONSTRAINT KREW_RTE_NODE_INSTN_LNK_TP1
		PRIMARY KEY (FROM_RTE_NODE_INSTN_ID,TO_RTE_NODE_INSTN_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_NODE_INSTN_LNK_TI1 
		  ON KREW_RTE_NODE_INSTN_LNK_T 
		  (FROM_RTE_NODE_INSTN_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_NODE_INSTN_LNK_TI2 
		  ON KREW_RTE_NODE_INSTN_LNK_T 
		  (TO_RTE_NODE_INSTN_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_RTE_NODE_INSTN_LNK_T
		(FROM_RTE_NODE_INSTN_ID,TO_RTE_NODE_INSTN_ID)
		SELECT CAST(FROM_RTE_NODE_INSTN_ID as VARCHAR2(40)),CAST(TO_RTE_NODE_INSTN_ID as VARCHAR2(40))
		FROM TEMP_KREW_RTE_NODE_INSTN_LNK_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_NODE_INSTN_LNK_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_NODE_INSTN_LNK_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_RTE_BRCH_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_BRCH_T RENAME TO TEMP_KREW_RTE_BRCH_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_RTE_BRCH_T
		(
		      RTE_BRCH_ID VARCHAR2(40)
		        , NM VARCHAR2(255) NOT NULL
		        , PARNT_ID VARCHAR2(40)
		        , INIT_RTE_NODE_INSTN_ID VARCHAR2(40)
		        , SPLT_RTE_NODE_INSTN_ID VARCHAR2(40)
		        , JOIN_RTE_NODE_INSTN_ID VARCHAR2(40)
		        , VER_NBR NUMBER(8) default 0
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_BRCH_T
		    ADD CONSTRAINT KREW_RTE_BRCH_TP1
		PRIMARY KEY (RTE_BRCH_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_BRCH_TI1 
		  ON KREW_RTE_BRCH_T 
		  (NM)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_BRCH_TI2 
		  ON KREW_RTE_BRCH_T 
		  (PARNT_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_BRCH_TI3 
		  ON KREW_RTE_BRCH_T 
		  (INIT_RTE_NODE_INSTN_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_BRCH_TI4 
		  ON KREW_RTE_BRCH_T 
		  (SPLT_RTE_NODE_INSTN_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_BRCH_TI5 
		  ON KREW_RTE_BRCH_T 
		  (JOIN_RTE_NODE_INSTN_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_RTE_BRCH_T
		(RTE_BRCH_ID, NM, PARNT_ID, INIT_RTE_NODE_INSTN_ID, SPLT_RTE_NODE_INSTN_ID, JOIN_RTE_NODE_INSTN_ID, VER_NBR)
		SELECT 
		CAST(RTE_BRCH_ID as VARCHAR2(40)), NM, CAST(PARNT_ID as VARCHAR2(40)), 
		CAST(INIT_RTE_NODE_INSTN_ID as VARCHAR2(40)), CAST(SPLT_RTE_NODE_INSTN_ID as VARCHAR2(40)), 
		CAST(JOIN_RTE_NODE_INSTN_ID as VARCHAR2(40)), VER_NBR
		FROM TEMP_KREW_RTE_BRCH_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_BRCH_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_BRCH_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_RTE_BRCH_ST_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_BRCH_ST_T RENAME TO TEMP_KREW_RTE_BRCH_ST_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_RTE_BRCH_ST_T
		(
		      RTE_BRCH_ST_ID VARCHAR2(40)
		        , RTE_BRCH_ID VARCHAR2(40) NOT NULL
		        , KEY_CD VARCHAR2(255) NOT NULL
		        , VAL VARCHAR2(2000)
		        , VER_NBR NUMBER(8) default 0
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_BRCH_ST_T
		    ADD CONSTRAINT KREW_RTE_BRCH_ST_TP1
		PRIMARY KEY (RTE_BRCH_ST_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_BRCH_ST_TI1 
		  ON KREW_RTE_BRCH_ST_T 
		  (RTE_BRCH_ID, KEY_CD)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_BRCH_ST_TI2 
		  ON KREW_RTE_BRCH_ST_T 
		  (RTE_BRCH_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_BRCH_ST_TI3 
		  ON KREW_RTE_BRCH_ST_T 
		  (KEY_CD, VAL)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_RTE_BRCH_ST_T
		(RTE_BRCH_ST_ID, RTE_BRCH_ID, KEY_CD, VAL, VER_NBR)
		SELECT 
		CAST(RTE_BRCH_ST_ID as VARCHAR2(40)), CAST(RTE_BRCH_ID as VARCHAR2(40)), KEY_CD, VAL, VER_NBR
		FROM TEMP_KREW_RTE_BRCH_ST_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_BRCH_ST_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_BRCH_ST_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_RTE_NODE_INSTN_ST_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_NODE_INSTN_ST_T RENAME TO TEMP_KREW_RTE_NODE_INSTN_ST_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_RTE_NODE_INSTN_ST_T
		(
		      RTE_NODE_INSTN_ST_ID VARCHAR2(40)
		        , RTE_NODE_INSTN_ID VARCHAR2(40) NOT NULL
		        , KEY_CD VARCHAR2(255) NOT NULL
		        , VAL VARCHAR2(2000)
		        , VER_NBR NUMBER(8) default 0
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_NODE_INSTN_ST_T
		    ADD CONSTRAINT KREW_RTE_NODE_INSTN_ST_TP1
		PRIMARY KEY (RTE_NODE_INSTN_ST_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_NODE_INSTN_ST_TI1 
		  ON KREW_RTE_NODE_INSTN_ST_T 
		  (RTE_NODE_INSTN_ID, KEY_CD)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_NODE_INSTN_ST_TI2 
		  ON KREW_RTE_NODE_INSTN_ST_T 
		  (RTE_NODE_INSTN_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_NODE_INSTN_ST_TI3 
		  ON KREW_RTE_NODE_INSTN_ST_T 
		  (KEY_CD, VAL)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_RTE_NODE_INSTN_ST_T
		(RTE_NODE_INSTN_ST_ID, RTE_NODE_INSTN_ID, KEY_CD, VAL, VER_NBR)
		SELECT 
		CAST(RTE_NODE_INSTN_ST_ID as VARCHAR2(40)), CAST(RTE_NODE_INSTN_ID as VARCHAR2(40)), KEY_CD, VAL, VER_NBR
		FROM TEMP_KREW_RTE_NODE_INSTN_ST_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_NODE_INSTN_ST_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_NODE_INSTN_ST_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_DOC_TYP_ATTR_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_DOC_TYP_ATTR_T RENAME TO TEMP_KREW_DOC_TYP_ATTR_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_DOC_TYP_ATTR_T
		(
		      DOC_TYP_ATTRIB_ID VARCHAR2(40)
		        , DOC_TYP_ID VARCHAR2(40) NOT NULL
		        , RULE_ATTR_ID VARCHAR2(40) NOT NULL
		        , ORD_INDX NUMBER(4) default 0
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_DOC_TYP_ATTR_T
		    ADD CONSTRAINT KREW_DOC_TYP_ATTR_TP1
		PRIMARY KEY (DOC_TYP_ATTRIB_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_DOC_TYP_ATTR_TI1 
		  ON KREW_DOC_TYP_ATTR_T 
		  (DOC_TYP_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_DOC_TYP_ATTR_T
		(DOC_TYP_ATTRIB_ID, DOC_TYP_ID, RULE_ATTR_ID, ORD_INDX)
		SELECT 
		CAST(DOC_TYP_ATTRIB_ID as VARCHAR2(40)), CAST(DOC_TYP_ID as VARCHAR2(40)), 
		CAST(RULE_ATTR_ID as VARCHAR2(40)), ORD_INDX
		FROM TEMP_KREW_DOC_TYP_ATTR_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DOC_TYP_ATTR_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DOC_TYP_ATTR_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_RULE_ATTR_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RULE_ATTR_T RENAME TO TEMP_KREW_RULE_ATTR_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_RULE_ATTR_T
		(
		      RULE_ATTR_ID VARCHAR2(40)
		        , NM VARCHAR2(255) NOT NULL
		        , LBL VARCHAR2(2000) NOT NULL
		        , RULE_ATTR_TYP_CD VARCHAR2(2000) NOT NULL
		        , DESC_TXT VARCHAR2(2000)
		        , CLS_NM VARCHAR2(2000)
		        , XML CLOB
		        , VER_NBR NUMBER(8) default 0
		        , APPL_ID VARCHAR2(255)
		        , OBJ_ID VARCHAR2(36) NOT NULL
		    , CONSTRAINT KREW_RULE_ATTR_TC0 UNIQUE (OBJ_ID)
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RULE_ATTR_T
		    ADD CONSTRAINT KREW_RULE_ATTR_TP1
		PRIMARY KEY (RULE_ATTR_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_RULE_ATTR_T
		(RULE_ATTR_ID, NM, LBL, RULE_ATTR_TYP_CD, DESC_TXT, CLS_NM, XML, VER_NBR, APPL_ID, OBJ_ID)
		SELECT 
		CAST(RULE_ATTR_ID as VARCHAR2(40)), NM, LBL, RULE_ATTR_TYP_CD, DESC_TXT, CLS_NM, XML, VER_NBR, APPL_ID, OBJ_ID
		FROM TEMP_KREW_RULE_ATTR_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RULE_ATTR_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RULE_ATTR_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_RULE_TMPL_OPTN_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RULE_TMPL_OPTN_T RENAME TO TEMP_KREW_RULE_TMPL_OPTN_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_RULE_TMPL_OPTN_T
		(
		      RULE_TMPL_OPTN_ID VARCHAR2(40)
		        , RULE_TMPL_ID VARCHAR2(40)
		        , KEY_CD VARCHAR2(250)
		        , VAL VARCHAR2(2000)
		        , VER_NBR NUMBER(8) default 0
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RULE_TMPL_OPTN_T
		    ADD CONSTRAINT KREW_RULE_TMPL_OPTN_TP1
		PRIMARY KEY (RULE_TMPL_OPTN_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_RULE_TMPL_OPTN_T
		(RULE_TMPL_OPTN_ID, RULE_TMPL_ID, KEY_CD, VAL, VER_NBR)
		SELECT 
		CAST(RULE_TMPL_OPTN_ID as VARCHAR2(40)), CAST(RULE_TMPL_ID as VARCHAR2(40)), KEY_CD, VAL, VER_NBR
		FROM TEMP_KREW_RULE_TMPL_OPTN_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RULE_TMPL_OPTN_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RULE_TMPL_OPTN_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_OUT_BOX_ITM_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_OUT_BOX_ITM_T RENAME TO TEMP_KREW_OUT_BOX_ITM_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_OUT_BOX_ITM_T
		(
		      ACTN_ITM_ID VARCHAR2(40)
		        , PRNCPL_ID VARCHAR2(40) NOT NULL
		        , ASND_DT DATE NOT NULL
		        , RQST_CD CHAR(1) NOT NULL
		        , ACTN_RQST_ID VARCHAR2(40) NOT NULL
		        , DOC_HDR_ID VARCHAR2(40) NOT NULL
		        , ROLE_NM VARCHAR2(2000)
		        , DLGN_PRNCPL_ID VARCHAR2(40)
		        , DOC_HDR_TTL VARCHAR2(255)
		        , DOC_TYP_LBL VARCHAR2(128) NOT NULL
		        , DOC_HDLR_URL VARCHAR2(255) NOT NULL
		        , DOC_TYP_NM VARCHAR2(64) NOT NULL
		        , RSP_ID VARCHAR2(40) NOT NULL
		        , DLGN_TYP VARCHAR2(1)
		        , VER_NBR NUMBER(8) default 0
		        , GRP_ID VARCHAR2(40)
		        , DLGN_GRP_ID VARCHAR2(40)
		        , RQST_LBL VARCHAR2(255)
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_OUT_BOX_ITM_T
		    ADD CONSTRAINT KREW_OUT_BOX_ITM_TP1
		PRIMARY KEY (ACTN_ITM_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_OUT_BOX_ITM_TI1 
		  ON KREW_OUT_BOX_ITM_T 
		  (PRNCPL_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_OUT_BOX_ITM_TI2 
		  ON KREW_OUT_BOX_ITM_T 
		  (DOC_HDR_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_OUT_BOX_ITM_TI3 
		  ON KREW_OUT_BOX_ITM_T 
		  (ACTN_RQST_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_OUT_BOX_ITM_T
		(ACTN_ITM_ID, PRNCPL_ID, ASND_DT, RQST_CD, ACTN_RQST_ID, DOC_HDR_ID, ROLE_NM, 
		DLGN_PRNCPL_ID, DOC_HDR_TTL, DOC_TYP_LBL, DOC_HDLR_URL, DOC_TYP_NM, RSP_ID, 
		DLGN_TYP, VER_NBR, GRP_ID, DLGN_GRP_ID, RQST_LBL)
		SELECT 
		CAST(ACTN_ITM_ID as VARCHAR2(40)), PRNCPL_ID, ASND_DT, RQST_CD, CAST(ACTN_RQST_ID as VARCHAR2(40)), 
		DOC_HDR_ID, ROLE_NM, 
		DLGN_PRNCPL_ID, DOC_HDR_TTL, DOC_TYP_LBL, DOC_HDLR_URL, DOC_TYP_NM, 
		CAST(RSP_ID as VARCHAR2(40)), 
		DLGN_TYP, VER_NBR, GRP_ID, DLGN_GRP_ID, RQST_LBL
		FROM TEMP_KREW_OUT_BOX_ITM_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_OUT_BOX_ITM_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_OUT_BOX_ITM_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_RTE_NODE_CFG_PARM_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_NODE_CFG_PARM_T RENAME TO TEMP_KREW_RTE_NODE_CFG_PARM_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_RTE_NODE_CFG_PARM_T
		(
		      RTE_NODE_CFG_PARM_ID VARCHAR2(40)
		        , RTE_NODE_ID VARCHAR2(40) NOT NULL
		        , KEY_CD VARCHAR2(255) NOT NULL
		        , VAL VARCHAR2(4000)
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_NODE_CFG_PARM_T
		    ADD CONSTRAINT KREW_RTE_NODE_CFG_PARM_TP1
		PRIMARY KEY (RTE_NODE_CFG_PARM_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_NODE_CFG_PARM_TI1 
		  ON KREW_RTE_NODE_CFG_PARM_T 
		  (RTE_NODE_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_RTE_NODE_CFG_PARM_T
		(RTE_NODE_CFG_PARM_ID, RTE_NODE_ID, KEY_CD, VAL)
		SELECT 
		CAST(RTE_NODE_CFG_PARM_ID as VARCHAR2(40)), CAST(RTE_NODE_ID as VARCHAR2(40)), KEY_CD, VAL
		FROM TEMP_KREW_RTE_NODE_CFG_PARM_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_NODE_CFG_PARM_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_NODE_CFG_PARM_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_DOC_TYP_PROC_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_DOC_TYP_PROC_T RENAME TO TEMP_KREW_DOC_TYP_PROC_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_DOC_TYP_PROC_T
		(
		      DOC_TYP_PROC_ID VARCHAR2(40)
		        , DOC_TYP_ID VARCHAR2(40) NOT NULL
		        , INIT_RTE_NODE_ID VARCHAR2(40)
		        , NM VARCHAR2(255) NOT NULL
		        , INIT_IND NUMBER(1) default 0 NOT NULL
		        , VER_NBR NUMBER(8) default 0
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_DOC_TYP_PROC_T
		    ADD CONSTRAINT KREW_DOC_TYP_PROC_TP1
		PRIMARY KEY (DOC_TYP_PROC_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_DOC_TYP_PROC_TI1 
		  ON KREW_DOC_TYP_PROC_T 
		  (DOC_TYP_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_DOC_TYP_PROC_TI2 
		  ON KREW_DOC_TYP_PROC_T 
		  (INIT_RTE_NODE_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_DOC_TYP_PROC_TI3 
		  ON KREW_DOC_TYP_PROC_T 
		  (NM)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_DOC_TYP_PROC_T
		(DOC_TYP_PROC_ID, DOC_TYP_ID, INIT_RTE_NODE_ID, NM, INIT_IND, VER_NBR)
		SELECT 
		CAST(DOC_TYP_PROC_ID as VARCHAR2(40)), CAST(DOC_TYP_ID as VARCHAR2(40)), INIT_RTE_NODE_ID, 
		NM, INIT_IND, VER_NBR
		FROM TEMP_KREW_DOC_TYP_PROC_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DOC_TYP_PROC_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DOC_TYP_PROC_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_DOC_LNK_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_DOC_LNK_T RENAME TO TEMP_KREW_DOC_LNK_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_DOC_LNK_T
		(
		      DOC_LNK_ID VARCHAR2(40)
		        , ORGN_DOC_ID VARCHAR2(40) NOT NULL
		        , DEST_DOC_ID VARCHAR2(40) NOT NULL
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_DOC_LNK_T
		    ADD CONSTRAINT KREW_DOC_LNK_TP1
		PRIMARY KEY (DOC_LNK_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_DOC_LNK_TI1 
		  ON KREW_DOC_LNK_T 
		  (ORGN_DOC_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_DOC_LNK_T
		(DOC_LNK_ID, ORGN_DOC_ID, DEST_DOC_ID)
		SELECT 
		CAST(DOC_LNK_ID as VARCHAR2(40)), ORGN_DOC_ID, DEST_DOC_ID
		FROM TEMP_KREW_DOC_LNK_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DOC_LNK_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DOC_LNK_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_RTE_BRCH_PROTO_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_BRCH_PROTO_T RENAME TO TEMP_KREW_RTE_BRCH_PROTO_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_RTE_BRCH_PROTO_T
		(
		      RTE_BRCH_PROTO_ID VARCHAR2(40)
		        , BRCH_NM VARCHAR2(255) NOT NULL
		        , VER_NBR NUMBER(8) default 0
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RTE_BRCH_PROTO_T
		    ADD CONSTRAINT KREW_RTE_BRCH_PROTO_TP1
		PRIMARY KEY (RTE_BRCH_PROTO_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RTE_BRCH_PROTO_TI1 
		  ON KREW_RTE_BRCH_PROTO_T 
		  (BRCH_NM)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_RTE_BRCH_PROTO_T
		(RTE_BRCH_PROTO_ID, BRCH_NM, VER_NBR)
		SELECT 
		CAST(RTE_BRCH_PROTO_ID as VARCHAR2(40)), BRCH_NM, VER_NBR
		FROM TEMP_KREW_RTE_BRCH_PROTO_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_BRCH_PROTO_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_BRCH_PROTO_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_RULE_EXT_VAL_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RULE_EXT_VAL_T RENAME TO TEMP_KREW_RULE_EXT_VAL_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_RULE_EXT_VAL_T
		(
		      RULE_EXT_VAL_ID VARCHAR2(40)
		        , RULE_EXT_ID VARCHAR2(40) NOT NULL
		        , VAL VARCHAR2(2000) NOT NULL
		        , KEY_CD VARCHAR2(2000) NOT NULL
		        , VER_NBR NUMBER(8) default 0
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RULE_EXT_VAL_T
		    ADD CONSTRAINT KREW_RULE_EXT_VAL_TP1
		PRIMARY KEY (RULE_EXT_VAL_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RULE_EXT_VAL_T1 
		  ON KREW_RULE_EXT_VAL_T 
		  (RULE_EXT_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_RULE_EXT_VAL_T2 
		  ON KREW_RULE_EXT_VAL_T 
		  (RULE_EXT_VAL_ID, KEY_CD)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_RULE_EXT_VAL_T
		(RULE_EXT_VAL_ID, RULE_EXT_ID, VAL, KEY_CD, VER_NBR)
		SELECT 
		CAST(RULE_EXT_VAL_ID as VARCHAR2(40)), CAST(RULE_EXT_ID as VARCHAR2(40)), VAL, KEY_CD, VER_NBR
		FROM TEMP_KREW_RULE_EXT_VAL_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RULE_EXT_VAL_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RULE_EXT_VAL_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
			DECLARE
				TableName VARCHAR2(30) := 'KREW_RULE_EXPR_T';
				CURSOR tab_cons IS
					SELECT constraint_name
						FROM user_constraints
						WHERE table_name = TableName 
						  AND constraint_type IN ( 'P', 'U', 'R' );
                CURSOR tab_ind IS
                    SELECT index_name
                        FROM user_indexes
                        WHERE table_name = TableName
                          AND index_type != 'LOB';
            BEGIN
                FOR cons IN tab_cons LOOP
                    EXECUTE IMMEDIATE 'ALTER TABLE '||TableName||' DROP CONSTRAINT '||cons.constraint_name;
                END LOOP;
                FOR ind IN tab_ind LOOP
                    EXECUTE IMMEDIATE 'DROP INDEX '||ind.index_name;
                END LOOP;
            END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RULE_EXPR_T RENAME TO TEMP_KREW_RULE_EXPR_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_RULE_EXPR_T
		(
		      RULE_EXPR_ID VARCHAR2(40)
		        , TYP VARCHAR2(256) NOT NULL
		        , RULE_EXPR VARCHAR2(4000)
		        , OBJ_ID VARCHAR2(36) NOT NULL
		        , VER_NBR NUMBER(8) default 0
		    , CONSTRAINT KREW_RULE_EXPR_TC0 UNIQUE (OBJ_ID)
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_RULE_EXPR_T
		    ADD CONSTRAINT KREW_RULE_EXPR_TP1
		PRIMARY KEY (RULE_EXPR_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_RULE_EXPR_T
		(RULE_EXPR_ID, TYP, RULE_EXPR, OBJ_ID, VER_NBR)
		SELECT 
		CAST(RULE_EXPR_ID as VARCHAR2(40)), TYP, RULE_EXPR, OBJ_ID, VER_NBR
		FROM TEMP_KREW_RULE_EXPR_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RULE_EXPR_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RULE_EXPR_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
		-----------------------------------------------------------------------------
		-- KREW_APP_DOC_STAT_TRAN_T
		-----------------------------------------------------------------------------
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_APP_DOC_STAT_TRAN_TC0' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'ALTER TABLE KREW_APP_DOC_STAT_TRAN_T DROP CONSTRAINT KREW_APP_DOC_STAT_TRAN_TC0';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_APP_DOC_STAT_TRAN_TC0 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_APP_DOC_STAT_TRAN_TP1' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'ALTER TABLE KREW_APP_DOC_STAT_TRAN_T DROP CONSTRAINT KREW_APP_DOC_STAT_TRAN_TP1';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_APP_DOC_STAT_TRAN_TP1 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_APP_DOC_STAT_TI1' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_APP_DOC_STAT_TI1';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_APP_DOC_STAT_TI1 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_APP_DOC_STAT_TI2' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_APP_DOC_STAT_TI2';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_APP_DOC_STAT_TI2 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_APP_DOC_STAT_TI3' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_APP_DOC_STAT_TI3';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_APP_DOC_STAT_TI3 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_APP_DOC_STAT_TRAN_T RENAME TO TEMP_KREW_APP_DOC_STAT_TRAN_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_APP_DOC_STAT_TRAN_T
		(
		      APP_DOC_STAT_TRAN_ID VARCHAR2(40)
		        , DOC_HDR_ID VARCHAR2(40)
		        , APP_DOC_STAT_FROM VARCHAR2(64)
		        , APP_DOC_STAT_TO VARCHAR2(64)
		        , STAT_TRANS_DATE DATE
		        , VER_NBR NUMBER(8) default 0
		        , OBJ_ID VARCHAR2(36) NOT NULL
		    , CONSTRAINT KREW_APP_DOC_STAT_TRAN_TC0 UNIQUE (OBJ_ID)
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_APP_DOC_STAT_TRAN_T
		    ADD CONSTRAINT KREW_APP_DOC_STAT_TRAN_TP1
		PRIMARY KEY (APP_DOC_STAT_TRAN_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_APP_DOC_STAT_TI1 
		  ON KREW_APP_DOC_STAT_TRAN_T 
		  (DOC_HDR_ID, STAT_TRANS_DATE)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_APP_DOC_STAT_TI2 
		  ON KREW_APP_DOC_STAT_TRAN_T 
		  (DOC_HDR_ID, APP_DOC_STAT_FROM)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_APP_DOC_STAT_TI3 
		  ON KREW_APP_DOC_STAT_TRAN_T 
		  (DOC_HDR_ID, APP_DOC_STAT_TO)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_APP_DOC_STAT_TRAN_T
		(APP_DOC_STAT_TRAN_ID, DOC_HDR_ID, APP_DOC_STAT_FROM, APP_DOC_STAT_TO, STAT_TRANS_DATE, VER_NBR, OBJ_ID)
		SELECT 
		CAST(APP_DOC_STAT_TRAN_ID as VARCHAR2(40)), DOC_HDR_ID, APP_DOC_STAT_FROM, APP_DOC_STAT_TO, STAT_TRANS_DATE, VER_NBR, OBJ_ID
		FROM TEMP_KREW_APP_DOC_STAT_TRAN_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_APP_DOC_STAT_TRAN_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_APP_DOC_STAT_TRAN_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
		-----------------------------------------------------------------------------
		-- KREW_DOC_HDR_EXT_DT_T
		-----------------------------------------------------------------------------
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_HDR_EXT_DT_TP1' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_HDR_EXT_DT_T DROP CONSTRAINT KREW_DOC_HDR_EXT_DT_TP1';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_DT_TP1 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_DT_TI1' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_DT_TI1';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_DT_TI1 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_DT_TI2' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_DT_TI2';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_DT_TI2 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_DT_TI3' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_DT_TI3';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_DT_TI3 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_DOC_HDR_EXT_DT_T RENAME TO TEMP_KREW_DOC_HDR_EXT_DT_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_DOC_HDR_EXT_DT_T
		(
		      DOC_HDR_EXT_DT_ID VARCHAR2(40)
		        , DOC_HDR_ID VARCHAR2(40) NOT NULL
		        , KEY_CD VARCHAR2(256) NOT NULL
		        , VAL DATE
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_DOC_HDR_EXT_DT_T
		    ADD CONSTRAINT KREW_DOC_HDR_EXT_DT_TP1
		PRIMARY KEY (DOC_HDR_EXT_DT_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_DOC_HDR_EXT_DT_TI1 
		  ON KREW_DOC_HDR_EXT_DT_T 
		  (KEY_CD, VAL)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_DOC_HDR_EXT_DT_TI2 
		  ON KREW_DOC_HDR_EXT_DT_T 
		  (DOC_HDR_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_DOC_HDR_EXT_DT_TI3 
		  ON KREW_DOC_HDR_EXT_DT_T 
		  (VAL)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_DOC_HDR_EXT_DT_T
		(DOC_HDR_EXT_DT_ID, DOC_HDR_ID, KEY_CD, VAL)
		SELECT 
		CAST(DOC_HDR_EXT_DT_ID as VARCHAR2(40)), DOC_HDR_ID, KEY_CD, VAL
		FROM TEMP_KREW_DOC_HDR_EXT_DT_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DOC_HDR_EXT_DT_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DOC_HDR_EXT_DT_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
		-----------------------------------------------------------------------------
		-- KREW_DOC_HDR_EXT_LONG_T
		-----------------------------------------------------------------------------
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_HDR_EXT_LONG_TP1' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_HDR_EXT_LONG_T DROP CONSTRAINT KREW_DOC_HDR_EXT_LONG_TP1';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_LONG_TP1 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_LONG_TI1' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_LONG_TI1';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_LONG_TI1 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_LONG_TI2' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_LONG_TI2';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_LONG_TI2 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_LONG_TI3' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_LONG_TI3';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_LONG_TI3 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_DOC_HDR_EXT_LONG_T RENAME TO TEMP_KREW_DOC_HDR_EXT_LONG_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_DOC_HDR_EXT_LONG_T
		(
		      DOC_HDR_EXT_LONG_ID VARCHAR2(40)
		        , DOC_HDR_ID VARCHAR2(40) NOT NULL
		        , KEY_CD VARCHAR2(256) NOT NULL
		        , VAL NUMBER(22)
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_DOC_HDR_EXT_LONG_T
		    ADD CONSTRAINT KREW_DOC_HDR_EXT_LONG_TP1
		PRIMARY KEY (DOC_HDR_EXT_LONG_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_DOC_HDR_EXT_LONG_TI1 
		  ON KREW_DOC_HDR_EXT_LONG_T 
		  (KEY_CD, VAL)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_DOC_HDR_EXT_LONG_TI2 
		  ON KREW_DOC_HDR_EXT_LONG_T 
		  (DOC_HDR_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_DOC_HDR_EXT_LONG_TI3 
		  ON KREW_DOC_HDR_EXT_LONG_T 
		  (VAL)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_DOC_HDR_EXT_LONG_T
		(DOC_HDR_EXT_LONG_ID, DOC_HDR_ID, KEY_CD, VAL)
		SELECT 
		CAST(DOC_HDR_EXT_LONG_ID as VARCHAR2(40)), DOC_HDR_ID, KEY_CD, VAL
		FROM TEMP_KREW_DOC_HDR_EXT_LONG_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DOC_HDR_EXT_LONG_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DOC_HDR_EXT_LONG_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
		-----------------------------------------------------------------------------
		-- KREW_DOC_HDR_EXT_FLT_T
		-----------------------------------------------------------------------------
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_HDR_EXT_FLT_TP1' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_HDR_EXT_FLT_T DROP CONSTRAINT KREW_DOC_HDR_EXT_FLT_TP1';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_FLT_TP1 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_FLT_TI1' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_FLT_TI1';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_FLT_TI1 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_FLT_TI2' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_FLT_TI2';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_FLT_TI2 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_FLT_TI3' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_FLT_TI3';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_FLT_TI3 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_DOC_HDR_EXT_FLT_T RENAME TO TEMP_KREW_DOC_HDR_EXT_FLT_T
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE TABLE KREW_DOC_HDR_EXT_FLT_T
		(
		      DOC_HDR_EXT_FLT_ID VARCHAR2(40)
		        , DOC_HDR_ID VARCHAR2(40) NOT NULL
		        , KEY_CD VARCHAR2(256) NOT NULL
		        , VAL NUMBER(30,15)
		)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		ALTER TABLE KREW_DOC_HDR_EXT_FLT_T
		    ADD CONSTRAINT KREW_DOC_HDR_EXT_FLT_TP1
		PRIMARY KEY (DOC_HDR_EXT_FLT_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_DOC_HDR_EXT_FLT_TI1 
		  ON KREW_DOC_HDR_EXT_FLT_T 
		  (KEY_CD, VAL)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_DOC_HDR_EXT_FLT_TI2 
		  ON KREW_DOC_HDR_EXT_FLT_T 
		  (DOC_HDR_ID)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		CREATE INDEX KREW_DOC_HDR_EXT_FLT_TI3 
		  ON KREW_DOC_HDR_EXT_FLT_T 
		  (VAL)
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		INSERT INTO KREW_DOC_HDR_EXT_FLT_T
		(DOC_HDR_EXT_FLT_ID, DOC_HDR_ID, KEY_CD, VAL)
		SELECT 
		CAST(DOC_HDR_EXT_FLT_ID as VARCHAR2(40)), DOC_HDR_ID, KEY_CD, VAL
		FROM TEMP_KREW_DOC_HDR_EXT_FLT_T
		]]></sql>
		<!-- <sql splitStatements="false"><![CDATA[
		DECLARE temp NUMBER;
		BEGIN
			SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DOC_HDR_EXT_FLT_T';
			IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DOC_HDR_EXT_FLT_T CASCADE CONSTRAINTS PURGE'; END IF;
		END;
		]]></sql> -->
		<sql splitStatements="false"><![CDATA[
		-----------------------------------------------------------------------------
		-- KREW_DOC_HDR_EXT_T
		-----------------------------------------------------------------------------
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_HDR_EXT_TP1' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_HDR_EXT_T DROP CONSTRAINT KREW_DOC_HDR_EXT_TP1';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_TP1 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_TI1' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_TI1';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_TI1 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_TI2' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_TI2';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_TI2 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
		<sql splitStatements="false"><![CDATA[
		DECLARE
		c NUMBER;
		BEGIN
		select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_TI3' ;
		IF c>0 THEN
		EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_TI3';
		ELSE
		DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_TI3 does not exist, so not running statement to change/drop it.');
		END IF;
		END;
		]]></sql>
</changeSet>
</databaseChangeLog>
